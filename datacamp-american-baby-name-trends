Q1: Let's get oriented to American baby name tastes by looking at the names that have stood the test of time!
Find first names and the total number of babies given that name for names that appear in every year of the data set, from 1920-2020 

SELECT 
    first_name,
    SUM(num) AS sum
FROM baby_names
GROUP BY first_name
HAVING COUNT(year) = 101
ORDER BY sum DESC;

Q2: Now, let's broaden our understanding of the dataset by looking at all names. 
We'll attempt to capture the type of popularity that each name in the dataset enjoyed. 
Was the name classic and popular across many years or trendy, only popular for a few years? Let's find out.

SELECT 
    first_name,
    SUM(num),
    CASE 
        WHEN COUNT(first_name) > 80 THEN 'Classic'
        WHEN COUNT(first_name) > 50 THEN 'Semi-classic'
        WHEN COUNT(first_name) > 20 THEN 'Semi-trendy'
        ELSE 'Trendy' 
    END AS popularity_type
FROM baby_names
GROUP BY first_name
ORDER BY first_name;

Q3: Since we didn't get many traditionally female names in our classic American names search in the first task, let's limit our search
to names which were given to female babies. Assign a rank to female names based on the number of babies that have ever been given that name. 
What are the top-ranked female names since 1920?

SELECT 
    first_name,
    SUM(num),
    RANK() OVER(ORDER BY SUM(num) DESC) AS name_rank
FROM baby_names
WHERE sex = 'F'
GROUP BY first_name
LIMIT 10;

Q4: Perhaps a friend has heard of our work analyzing baby names and would like help choosing a name for her baby, a girl. 
She doesn't like any of the top-ranked names we found in the previous task.
She's set on a traditionally female name ending in the letter 'a' since she's heard that vowels in baby names are trendy. 
She's also looking for a name that has been popular in the years since 2015.

SELECT 
    first_name
FROM baby_names
WHERE sex = 'F'
AND year > 2015
AND first_name LIKE '%a'
GROUP BY first_name
ORDER BY SUM(num) DESC;  //This showed as the correct answer, but if it wouldn't work with aggregate function in ORDER BY I did a subquery in FROM with the entire original query + SUM(num) in the SELECT statement and got the same results

Q5: 
