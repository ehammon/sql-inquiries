-- Easy Data Science Interview Questions on DataLemur

Q1: Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job. 
You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.

Write a query to list the candidates who possess all of the required skills for the job. 
Sort the output by candidate ID in ascending order.

SELECT candidate_id
FROM candidates
 WHERE skill IN ('Python', 'PostgreSQL', 'Tableau')
 GROUP BY candidate_id
 HAVING COUNT(candidate_id) = 3
 ORDER BY candidate_id;



Q2: Assume you are given the tables below about Facebook pages and page likes.

Write a query to return the page IDs of all the Facebook pages that don't have any likes. 
The output should be in ascending order.

SELECT pages.page_id
FROM pages
LEFT JOIN page_likes
ON pages.page_id = page_likes.page_id
WHERE liked_date IS NULL
ORDER BY pages.page_id;



Q3: Tesla is investigating bottlenecks in their production, and they need your help to extract the relevant data. 

Write a query that determines which parts have begun the assembly process but are not yet finished.

SELECT DISTINCT part 
FROM parts_assembly
WHERE finish_date IS NULL;



Q4: Assume that you are given the table below containing information on viewership by device type (where the three types are laptop, tablet, and phone). 
Define “mobile” as the sum of tablet and phone viewership numbers. 

Write a query to compare the viewership on laptops versus mobile devices.
Output the total viewership for laptop and mobile devices in the format of "laptop_views" and "mobile_views".

SELECT 
  COUNT(
    CASE
      WHEN device_type = 'laptop' THEN device_type END) AS laptop_views,
  COUNT(
    CASE
      WHEN device_type != 'laptop' THEN device_type END) AS mobile_views
FROM viewership;



Q5: Assume you are given the table below that shows job postings for all companies on the LinkedIn platform. 
Write a query to get the number of companies that have posted duplicate job listings.

Clarification: Duplicate job listings refer to two jobs at the same company with the same title and description.

WITH duplicates AS (
SELECT company_id
  , title
  , description
  , COUNT(*)
FROM job_listings
GROUP BY company_id, title, description
HAVING COUNT(*) > 1)

SELECT COUNT(*) AS co_w_duplicate_jobs
FROM duplicates;



Q6: Given a table of Facebook posts, for each user who posted at least twice in 2021, write a query to find the number of days between each user’s first 
post of the year and last post of the year in the year 2021. 

Output the user and number of the days between each user's first and last post.

SELECT user_id,
   EXTRACT('day' from MAX(post_date)::timestamp - MIN(post_date)::timestamp) AS days_between
FROM posts
WHERE EXTRACT('year' FROM post_date) = 2021
GROUP BY user_id
HAVING COUNT(post_id)>1;



Q7: Write a query to find the top 2 power users who sent the most messages on Microsoft Teams in August 2022.

Display the IDs of these 2 users along with the total number of messages they sent. 
Output the results in descending count of the messages.

SELECT sender_id
  , COUNT (DISTINCT(message_id)) AS message_count
FROM messages
WHERE EXTRACT(MONTH FROM sent_date) = 08 and EXTRACT(YEAR FROM sent_date) = 2022
GROUP BY sender_id
HAVING COUNT(message_id) > 1
ORDER BY message_count DESC;



Q8. You are given the tables below containing information on Robinhood trades and users. 
Write a query to list the top three cities that have the most completed trade orders in descending order.

Output the city and number of orders.

SELECT city,
  COUNT(order_id)
FROM trades
LEFT JOIN users
ON users.user_id = trades.user_id
WHERE status = 'Completed'
GROUP BY city
ORDER BY count desc
LIMIT 3;



Q9. Given the reviews table, write a query to get the average stars for each product every month.

The output should include the month in numerical value, product id, and average star rating rounded to two decimal places. 
Sort the output based on month followed by the product id.

SELECT EXTRACT('month' from submit_date) AS month
  , product_id
  , ROUND(AVG(stars), 2) AS avg_stars
FROM reviews
GROUP BY month, product_id
ORDER BY month, product_id;



Q10: Assume you have an events table on app analytics.
Write a query to get the app’s click-through rate (CTR %) in 2022. 
Output the results in percentages rounded to 2 decimal places.

Percentage of click-through rate = 100.0 * Number of clicks / Number of impressions
To avoid integer division, you should multiply the click-through rate by 100.0, not 100.

WITH ctr_counts AS (
SELECT app_id
  , COUNT(CASE WHEN event_type = 'impression' THEN event_type END) AS impression_count
  , COUNT(CASE WHEN event_type = 'click' THEN event_type END) AS click_count
FROM events
WHERE EXTRACT(year FROM timestamp) = 2022
GROUP BY app_id)

SELECT app_id
  , ROUND(100.0*click_count/impression_count, 2)
FROM ctr_counts;



Q11: New TikTok users sign up with their emails and each user receives a text confirmation to activate their account. 
Assume you are given the below tables about emails and texts.

Write a query to display the ids of the users who did not confirm on the first day of sign-up, but confirmed on the second day.

SELECT user_id
FROM emails
JOIN texts
ON emails.email_id = texts.email_id
WHERE EXTRACT('day' from action_date) = EXTRACT('day' FROM signup_date) + 1
AND signup_action = 'Confirmed';



Q12: Your team at JPMorgan Chase is soon launching a new credit card, and to gain some context, 
you are analyzing how many credit cards were issued each month.

Write a query that outputs the name of each credit card and the difference in issued amount between the month with the most cards issued, 
and the least cards issued. Order the results according to the biggest difference.

SELECT card_name
  , MAX(issued_amount) - MIN(issued_amount) as difference
FROM monthly_cards_issued
GROUP BY card_name
ORDER BY difference DESC;



Q13: You are trying to find the mean number of items bought per order on Alibaba, rounded to 1 decimal place.

However, instead of doing analytics on all Alibaba orders, you have access to a summary table, which describes how many items were in an order (item_count), 
and the number of orders that had that many items (order_occurrences).

SELECT ROUND(CAST(SUM(item_count * order_occurrences)AS DECIMAL)/SUM(order_occurrences),1) --must cast as decimal because both numbers are integer data types
FROM items_per_order;



Q14: CVS Health is trying to better understand its pharmacy sales, and how well different products are selling. 
Each drug can only be produced by one manufacturer.

Write a query to find the top 3 most profitable drugs sold, and how much profit they made. 
Assume that there are no ties in the profits. 
Display the result from the highest to the lowest total profit.

SELECT drug
  , total_sales - cogs AS profit
FROM pharmacy_sales
ORDER BY profit desc
LIMIT 3;



Q15: Write a query to find out which manufacturer is associated with the drugs that were not profitable and how much money CVS lost on these drugs. 

Output the manufacturer, number of drugs and total losses. Total losses should be in absolute value. 
Display the results with the highest losses on top.


SELECT manufacturer
  , COUNT(drug) AS total_drugs
  , SUM(cogs-total_sales) AS total_loss
FROM pharmacy_sales
WHERE cogs - total_sales > 0
GROUP BY manufacturer
ORDER BY total_loss DESC;



Q16: Write a query to find the total sales of drugs for each manufacturer. 
Round your answer to the closest million, and report your results in descending order of total sales.

Because this data is being directly fed into a dashboard which is being seen by business stakeholders, format your result like this: "$36 million".

SELECT manufacturer
  , CONCAT('$' || ROUND(SUM(total_sales)/1000000,0)||' '||'million') as sales
FROM pharmacy_sales
GROUP BY manufacturer
ORDER BY SUM(total_sales) desc;



Q17: UnitedHealth has a program called Advocate4Me, which allows members to call an advocate and receive support for their health care needs – 
whether that's behavioural, clinical, well-being, health care financing, benefits, claims or pharmacy help.

Write a query to find how many UHG members made 3 or more calls. case_id column uniquely identifies each call made.

WITH counts AS (
SELECT policy_holder_id
  , COUNT(case_id)
FROM callers
GROUP BY policy_holder_id
HAVING COUNT(case_id) >= 3)

SELECT COUNT(policy_holder_id) 
FROM counts;



Q18: Calls to the Advocate4Me call centre are categorised, but sometimes they can't fit neatly into a category. 
These uncategorised calls are labelled “n/a”, or are just empty (when a support agent enters nothing into the category field).

Write a query to find the percentage of calls that cannot be categorised. Round your answer to 1 decimal place.

WITH counts AS(
SELECT COUNT(case_id)*1.0 AS total_calls, 
  (SELECT COUNT(case_id)*1.0 FROM callers WHERE call_category = 'n/a' OR call_category IS NULL) AS uncat
FROM callers
)

SELECT ROUND((uncat/total_calls)*100,1) AS perc_uncat 
FROM counts;

-- CAN ALSO USE FILTER CLAUSE

SELECT 
  ROUND(100.0 * COUNT(case_id) FILTER (
    WHERE call_category IS NULL OR call_category = 'n/a')
  / COUNT(case_id), 1) as perc_uncategorized
FROM callers;
















